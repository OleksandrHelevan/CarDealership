using System.Diagnostics;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using Microsoft.EntityFrameworkCore;
using CarDealership.config;
using CarDealership.dto;
using CarDealership.mapper;
using CarDealership.repo.impl;
using CarDealership.service.impl;
using CarDealership.enums;
using CarDealership.entity;

namespace CarDealership.page.@operator
{
    public partial class UnboundCarsPage : Page
    {
        private readonly ProductServiceImpl _productService;

        public UnboundCarsPage()
        {
            InitializeComponent();
            _productService = new ProductServiceImpl(new ProductRepositoryImpl(new DealershipContext()));
            LoadUnboundCars();
        }

        private void LoadUnboundCars()
        {
            using var context = new DealershipContext();

            try
            {
                Debug.WriteLine("=== LoadUnboundCars START ===");

                // üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —É—Å—ñ –º–∞—à–∏–Ω–∏, —è–∫—ñ —â–µ –Ω–µ –º–∞—é—Ç—å Product
                var unboundCars = context.Cars
                    .Include(c => (c as GasolineCar).Engine)
                    .Include(c => (c as ElectroCar).Engine)
                    .AsSplitQuery()
                    .Where(c => !context.Products.Any(p => p.CarId == c.Id && p.CarType == c.CarType))
                    .ToList();

                Debug.WriteLine($"Found {unboundCars.Count} unbound cars total.");

                // üîπ –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö —ñ –º–∞–ø–∏–º–æ —É Vehicle DTO
                var gasolineCars = unboundCars.OfType<GasolineCar>().ToList();
                var electroCars = unboundCars.OfType<ElectroCar>().ToList();

                Debug.WriteLine($"GasolineCars: {gasolineCars.Count}, ElectroCars: {electroCars.Count}");

                var gasolineDtos = gasolineCars
                    .Select(gc =>
                    {
                        var dto = GasolineCarMapper.ToDto(gc);
                        dto.VehicleTypeName = "–ë–µ–Ω–∑–∏–Ω–æ–≤–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å";
                        return dto;
                    })
                    .ToList<Vehicle>();

                var electroDtos = electroCars
                    .Select(ec =>
                    {
                        var dto = ElectroCarMapper.ToDto(ec);
                        dto.VehicleTypeName = "–ï–ª–µ–∫—Ç—Ä–æ–º–æ–±—ñ–ª—å";
                        return dto;
                    })
                    .ToList<Vehicle>();

                var all = gasolineDtos.Concat(electroDtos).ToList();

                UnboundCarsList.ItemsSource = all;
                Debug.WriteLine($"–Ü—Ç–æ–≥–æ Unbound Cars (after mapping): {all.Count}");

                Debug.WriteLine("=== LoadUnboundCars END ===");
            }
            catch (System.Exception ex)
            {
                Debug.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ —É LoadUnboundCars: {ex}");
                MessageBox.Show($"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–æ: {ex.Message}",
                    "–ü–æ–º–∏–ª–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void PutOnSale_Click(object sender, RoutedEventArgs e)
        {
            if (sender is not Button btn) return;
            if (btn.DataContext is not Vehicle vehicle) return;

            var dialog = new PutOnSaleDialog(vehicle)
            {
                Owner = Window.GetWindow(this)
            };

            if (dialog.ShowDialog() == true)
            {
                var product = dialog.CreatedProduct;
                if (product == null)
                {
                    MessageBox.Show("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç");
                    return;
                }

                if (_productService.Create(product))
                {
                    MessageBox.Show("‚úÖ –ê–≤—Ç–æ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂");
                    LoadUnboundCars();
                }
                else
                {
                    MessageBox.Show("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤–∂–µ —ñ—Å–Ω—É—î");
                }
            }
        }
    }
}
