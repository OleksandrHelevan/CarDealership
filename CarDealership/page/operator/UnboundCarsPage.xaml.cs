using System;
using System.Diagnostics;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using Microsoft.EntityFrameworkCore; // –≤–∞–∂–ª–∏–≤–æ –¥–ª—è Include
using CarDealership.config;
using CarDealership.dto;
using CarDealership.enums;
using CarDealership.mapper;
using CarDealership.repo.impl;
using CarDealership.service.impl;

namespace CarDealership.page.@operator
{
    public partial class UnboundCarsPage : Page
    {
        private readonly ProductServiceImpl _productService;

        public UnboundCarsPage()
        {
            InitializeComponent();
            _productService = new ProductServiceImpl(new ProductRepositoryImpl(new DealershipContext()));
            LoadUnboundCars();
        }

        private void LoadUnboundCars()
        {
            using var context = new DealershipContext();

            try
            {
                // üîπ –ë–µ–Ω–∑–∏–Ω–æ–≤—ñ –∞–≤—Ç–æ
                var gasolineUnbound = context.GasolineCars
                    .Include(gc => gc.Engine) // –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–≤–∏–≥—É–Ω
                    .Where(gc => !context.Products.Any(p => p.GasolineCarId == gc.Id))
                    .ToList();

                foreach (var gc in gasolineUnbound)
                {
                    if (gc.Engine == null)
                        Debug.WriteLine($"‚ö† GasolineCar Id={gc.Id}, Brand={gc.Brand} –º–∞—î NULL Engine!");
                    else
                        Debug.WriteLine($"‚úÖ GasolineCar Id={gc.Id}, EngineId={gc.Engine.Id}");
                }

                var gasolineDto = gasolineUnbound
                    .Select(gc => GasolineCarMapper.ToDto(gc)) // –±–µ–∑–ø–µ—á–Ω–∏–π –º–∞–ø—ñ–Ω–≥
                    .ToList<Vehicle>();

                // üîπ –ï–ª–µ–∫—Ç—Ä–æ–∞–≤—Ç–æ
                var electroUnbound = context.ElectroCars
                    .Include(ec => ec.Engine)
                    .Where(ec => !context.Products.Any(p => p.ElectroCarId == ec.Id))
                    .ToList();

                foreach (var ec in electroUnbound)
                {
                    if (ec.Engine == null)
                        Debug.WriteLine($"‚ö† ElectroCar Id={ec.Id}, Brand={ec.Brand} –º–∞—î NULL Engine!");
                    else
                        Debug.WriteLine($"‚úÖ ElectroCar Id={ec.Id}, EngineId={ec.Engine.Id}");
                }

                var electroDto = electroUnbound
                    .Select(ec => ElectroCarMapper.ToDto(ec)) // –±–µ–∑–ø–µ—á–Ω–∏–π –º–∞–ø—ñ–Ω–≥
                    .ToList<Vehicle>();

                // üîπ –û–±‚Äô—î–¥–Ω—É—î–º–æ —É—Å—ñ –∞–≤—Ç–æ
                var all = gasolineDto.Concat(electroDto).ToList();
                UnboundCarsList.ItemsSource = all;

                Debug.WriteLine($"–Ü—Ç–æ–≥–æ Unbound Cars: {all.Count}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ —É LoadUnboundCars: {ex}");
                MessageBox.Show($"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–æ: {ex.Message}", "–ü–æ–º–∏–ª–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void PutOnSale_Click(object sender, RoutedEventArgs e)
        {
            if (sender is not Button btn) return;
            if (btn.DataContext is not Vehicle vehicle) return;

            var dialog = new PutOnSaleDialog(vehicle);
            dialog.Owner = Window.GetWindow(this);
            if (dialog.ShowDialog() == true)
            {
                var product = dialog.CreatedProduct;
                if (product == null)
                {
                    MessageBox.Show("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç");
                    return;
                }
                if (_productService.Create(product))
                {
                    MessageBox.Show("–ê–≤—Ç–æ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂");
                    LoadUnboundCars();
                }
                else
                {
                    MessageBox.Show("–ü—Ä–æ–¥—É–∫—Ç –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤–∂–µ —ñ—Å–Ω—É—î");
                }
            }
        }
    }
}
